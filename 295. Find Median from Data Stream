class MedianFinder:

    def __init__(self):
        #have 2 heaps => maxheap, minheap
        #heaps should be of almost equal sizes
        self.small, self.large = [], []
        

    def addNum(self, num: int) -> None:
        #Time : O(log n) for all heap operations
        heapq.heappush(self.small, -num)

        #check if all elements in small <= elements in large
        if (self.small and self.large and 
            (-1 * self.small[0] > self.large[0])):
            ele = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, ele)

        if len(self.small) > len(self.large) + 1:
            ele = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, ele)
        if len(self.large) > len(self.small) + 1:
            ele = -1 * heapq.heappop(self.large)
            heapq.heappush(self.small, ele)       

    def findMedian(self) -> float:
        #Time : O(1)
        if len(self.small) > len(self.large):
            return -1 * self.small[0]
        elif len(self.large) > len(self.small):
            return self.large[0]
        
        return ((-1 * self.small[0]) + self.large[0]) / 2
            
# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()